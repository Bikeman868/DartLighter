{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Dart",
	"scopeName": "source.dart",
	"patterns": [
		{ "include": "#comments" },
		{ "include": "#constants-and-special-vars" },
		{ "include": "#keywords" },
		{ "include": "#strings" },
		{ "include": "#variables" }
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.operator.cast.dart",
					"match": "\\bas\\b"
				},
				{
					"name": "keyword.control.exception.dart",
					"match": "\\b(try|catch|finally|throw)\\b"
				},
				{
					"name": "keyword.control.ternary.dart",
					"match": "\\?|:"
				},
				{
					"name": "keyword.control.dart",
					"match": "\\b(break|case|continue|default|do|else|for|if|in|return|switch|while)\\b"
				},
				{
					"name": "keyword.operator.new.dart",
					"match": "\\bnew\\b"
				},
				{
					"name": "keyword.other.dart",
					"match": "\\b(abstract|class|extends|external|factory|implements|import|interface|get|native|operator|set|typedef)\\b"
				},
				{
					"name": "keyword.operator.bitwise.dart",
					"match": "<<|>>>?|~|\\^|\\||&"
				},
				{
					"name": "keyword.operator.assignment.bitwise.dart",
					"match": "(<<|>>>?|~|\\^|\\||&)="
				},
				{
					"name": "keyword.operator.comparison.dart",
					"match": "===?|!==?|<=?|>=?"
				},
				{
					"name": "keyword.operator.assignment.arithmetic.dart",
					"match": "([+*/%-]|\\~)="
				},
				{
					"name": "keyword.operator.assignment.dart",
					"match": "="
				},
				{
					"name": "keyword.operator.increment-decrement.dart",
					"match": "\\-\\-|\\+\\+"
				},
				{
					"name": "keyword.operator.logical.dart",
					"match": "!|&&|\\|\\|"
				},
				{
					"name": "punctuation.terminator.dart",
					"match": ";"
				},
				{
					"name": "storage.modifier.dart",
					"match": "\\b(static|final|const)\\b"
				},
				{
					"name": "storage.type.dart",
					"match": "\\b(?:void|bool|num|int|double|Dynamic|var|String)\\b"
				}
			]
		},
		"variables": {
			"patterns":[
				{
					"match": "([a-zA-Z_][a-zA-Z0-9_]*(<[a-zA-Z_][a-zA-Z0-9_]*>)?) ([a-zA-Z_][a-zA-Z0-9_]*)",
					"captures" :{
						"1": { "name": "entity.name.type.dart" },
						"2": { "name": "entity.name.generic.dart" },
						"3": { "name": "entity.name.dart" }
					}
				}
			]
		},
		"strings": {
			"name": "string.quoted.single.dart",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.dart",
					"match": "\\\\."
				}
			]
		},
		"comments":{
			"patterns":[
				{
					"name": "comment.block.empty.dart",
					"match": "/\\*\\*/",
					"captures": {
						"0": { "name": "punctuation.definition.comment.dart" }
					}
				},
				{
					"include": "text.html.javadoc"
				},
				{
					"include": "#comments-inline"
				}
			]
		},
		"comments-inline":{
			"patterns":[
				{
					"name": "comment.block.dart",
					"begin": "/\\*",
					"end": "\\*/"
				},
				{
					"match": "((//).*)$",
					"captures": {
						"1": { "name": "comment.line.double-slash.dart"	}
					}
				}
			]
		},
		"constants-and-special-vars":{
			"patterns":[
				{
					"name": "constant.language.dart",
					"match": "\\b(true|false|null)\\b"
				},
				{
					"name": "constant.language.dart",
					"match": "\\b(this|super)\\b"
				},
				{
					"name": "constant.numeric.dart",
					"match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b"
				}
			]
		}
	}
}